name: Penetration Tests

on:
  schedule:
    # Run monthly on the 1st at 00:00 UTC
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      target_url:
        description: 'Target URL to test'
        required: false
        type: string

jobs:
  pentest:
    name: Run Penetration Tests
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap sslyze
      
      - name: Determine target URL
        id: target
        run: |
          if [ "${{ github.event.inputs.target_url }}" != "" ]; then
            echo "url=${{ github.event.inputs.target_url }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "url=https://careunity-prod.example.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://careunity-staging.example.com" >> $GITHUB_OUTPUT
          fi
      
      - name: Run penetration tests
        run: |
          node scripts/penetration-test.js --url ${{ steps.target.outputs.url }} --timeout 10000
        env:
          NODE_ENV: test
      
      - name: Upload penetration test report
        uses: actions/upload-artifact@v3
        with:
          name: pentest-report
          path: reports/pentest-report.md
      
      - name: Check for critical vulnerabilities
        id: check_critical
        run: |
          if grep -q "Critical vulnerabilities: 0" reports/pentest-report.md; then
            echo "has_critical=false" >> $GITHUB_OUTPUT
          else
            echo "has_critical=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Send notification for critical vulnerabilities
        if: steps.check_critical.outputs.has_critical == 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "⚠️ *CRITICAL SECURITY VULNERABILITIES DETECTED* ⚠️\nEnvironment: ${{ github.event.inputs.environment || 'staging' }}\nTarget: ${{ steps.target.outputs.url }}\nPlease check the penetration test report for details."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK_URL }}
      
      - name: Generate security report summary
        run: |
          echo "## Penetration Test Results" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "Target: ${{ steps.target.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          grep -A 5 "## Summary" reports/pentest-report.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, download the penetration test report artifact." >> $GITHUB_STEP_SUMMARY
